#!/usr/bin/env python

# (c) 2014, Nandor Sivok <dominis@haxor.hu>
#
# ansible-shell is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ansible-shell is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
#
#
# ansible-shell is an interactive shell for ansible
# with built-in tab completion for all the documented modules
#
# Available commands:
#  cd - change host/group (you can use host patterns eg.: app*.dc*:!app01*)
#  list - list available hosts in the current path
#  forks - change fork
#  become - become
#  ! - forces shell module instead of the ansible module (!yum update -y)
#
# Configuration:
# create a [ansible-shell] section in your ansbile.cfg
#  cwd=app-servers - you can set your default host pattern
#  forks=100 - default forks


import cmd
#import ansible.runner
from collections import namedtuple
from ansible.parsing.dataloader import DataLoader
from ansible.vars import VariableManager
from ansible.inventory import Inventory
from ansible.playbook.play import Play
from ansible.executor.task_queue_manager import TaskQueueManager

#from ansible.color import stringc, codeCodes
from ansible.utils.color import stringc, codeCodes
import ansible.constants as C
from ansible import utils
#from ansible import callbacks
from ansible.inventory import Inventory, Host
import ansible.utils.module_docs as module_docs
import getpass
import sys
import os
import pwd
import readline
import rlcompleter
import atexit

import ConfigParser
from ansible import cli
from ansible.cli import CLI

import ansible

from ansible.plugins import module_loader

from pprint import pprint
import pdb
debug = False

class colorizer(object):
    def __init__(self, color):
        self.color = color

    def __enter__(self):
        sys.stdout.write("\033[")
        sys.stdout.write(codeCodes[self.color])
        sys.stdout.write("m")

    def __exit__(self, *args):
        sys.stdout.write("\033[0m")


class AnsibleShell(CLI, cmd.Cmd):

    modules = []

    def __init__(self, options, args):
        self.options = options
        self.options.cwd = 'all'
        self.options.forks = 5

        sshpass    = None
        becomepass = None
        vault_pass = None
        passwords  = {}

        if False:
            ## Password part see: ./lib/ansible/cli/playbook.py
            #self.ssh_password, self.become_password, self.vault_password = self.load_passwords()
            #(self.ssh_password, self.become_password) = self.load_passwords()
            self.ssh_password = sshpass
            self.become_password = becomepass
            self.vault_password = vault_pass
        #self.ansible = ansible.runner.Runner(
        #    inventory=Inventory(self.options.inventory,
        #                        vault_password=self.vault_password),
        #    vault_pass=self.vault_password,
        #)

        variable_manager = VariableManager()
        loader = DataLoader()
        #self.inventory = Inventory(loader=loader, variable_manager=variable_manager, host_list=self.options.cwd)
        self.inventory = Inventory(loader=loader, variable_manager=variable_manager) # this OK.

        self.groups = self.inventory.get_groups().keys()
        self.hosts = self.inventory.get_groups()['all']

        #self.callbacks = callbacks.CliRunnerCallbacks()
        self.read_config_file()
        self.intro = 'Welcome to the ansible-shell.\nType help or ? to list commands.\n'
        self.set_prompt()
        self.modules = self.list_modules()
        self.modules.remove('shell')
        for module in self.modules:
            setattr(self, 'do_' + module, lambda arg, module=module: self.default(module + ' ' + arg))
            setattr(self, 'help_' + module, lambda module=module: self.helpdefault(module))
        cmd.Cmd.__init__(self)


    def load_passwords(self):
        #return utils.ask_passwords(
        #return cli.CLI.ask_passwords(CLI())
        return self.ask_passwords(
                self.options.ask_pass,
                #self.options.become_ask_pass,
                #self.options.ask_vault_pass
                )

    def read_config_file(self):
        allowed_items = {
            # name: type
            'cwd': 'str',
            'forks': 'int',
        }
        config, CONFIG_FILE = C.load_config_file()
        if config is not None and config.has_section('ansible-shell'):
            for item in config.items('ansible-shell'):
                if item[0] in allowed_items.keys():
                    value = vars(__builtins__)[allowed_items[item[0]]](item[1])
                    setattr(self.options, item[0], value)

    @staticmethod
    def parse_opts():
        #parser = utils.base_parser(
        parser = CLI.base_parser(
        #    constants=C,
            runas_opts=True,
            subset_opts=True,
            async_opts=True,
            #output_opts=True,   # FIXME: optparse.OptionConflictError: option -t/--tree: conflicting option string(s): -t
            connect_opts=True,
            check_opts=True,
            #diff_opts=False,    # FIXME: deprecated?
            usage='%prog <host-pattern> [options]'
        )

        parser.add_option('-p', '--step', default=False, action="store_true",
                          dest='step',
                          help='one-step-at-a-time: confirm each task before running')

        return parser.parse_args()

    def get_names(self):
        return dir(self)

    def cmdloop(self):
        try:
            cmd.Cmd.cmdloop(self)
            if debug:
                print "cmdloop looping"
        except KeyboardInterrupt:
            print "- Interrupted -"
            self.do_exit(self)
            # A workround: 
            # http://stackoverflow.com/questions/8813291/better-handling-of-keyboardinterrupt-in-cmd-cmd-command-line-interpreter
            self.cmdloop()   

    def set_prompt(self):
        self.selected = self.inventory.list_hosts(self.options.cwd)
        self.prompt = "%s@%s (%d)[f:%s]$ " % (self.options.remote_user if self.options.remote_user else "YOU", self.options.cwd, len(self.selected), self.options.forks)

    def list_modules(self):
        modules = set()
        module_paths = module_loader._get_paths()
        for path in module_paths:
            if path is not None:
                modules.update(self._find_modules_in_path(path))

        return modules

    def _find_modules_in_path(self, path):
        """Generate a list of potential modules in a given path"""
        for root, dirs, files in os.walk(path):
            for basename in files:
                module_name = basename.split('.')[0]
                ext = basename.split('.')[-1] if '.' in basename else None
                if not module_name.startswith('_') and \
                   ext in ('py', 'ps1', None) and \
                   module_name in module_loader:
                    yield module_name

    def confirm(self, module, module_args):
        if not self.options.step:
            return True

        # print hosts
        #callbacks.display("HOSTS:","bright blue")
        print "HOSTS:"
        for host in self.selected:
            hostname = host.name if isinstance(host, Host) else host
            #callbacks.display("\t%s" % hostname,"green")
            print "\t%s" % hostname

        #callbacks.display("\nSUMMARY: host_num[%d] module[%s] module_args[%s] options[%s]\n" % (len(self.selected), module, module_args, self.options),"bright blue")
        print "\nSUMMARY: host_num[%d] module[%s] module_args[%s] options[%s]\n" % (len(self.selected), module, module_args, self.options)

        answer=False
        try:
            print "Do you confirm to execute?[y/N]:(default=No) ",
            # cmd module use raw_input to read user command by default, to avoid our answer here 'logged' into history,
            # use sys.stdin.readline instead of raw_input, see more at http://docs.python.org/2/library/cmd.html#cmd.Cmd.use_rawinput
            answer = sys.stdin.readline()[:-1]
        except:
            answer = False
        return utils.boolean(answer)

    def default(self, arg, forceshell=False):
        if arg.startswith("#"):
            return False

        if not self.options.cwd:
            print "No host found"
            return False

        if arg.split()[0] in self.modules:
            module = arg.split()[0]
            module_args = ' '.join(arg.split()[1:])
        else:
            module = 'shell'
            module_args = arg

        if forceshell is True:
            module = 'shell'
            module_args = arg

        if not self.confirm(module, module_args):
            #callbacks.display("Command canceled by user")
            print "Command canceled by user"
            return

        self.options.module_name = module
        #self.callbacks.options = self.options

        Options = namedtuple('Options', ['connection','module_path', 'forks', 'remote_user', 'private_key_file', 'ssh_common_args', 'ssh_extra_args', 'sftp_extra_args', 'scp_extra_args', 'become', 'become_method', 'become_user', 'verbosity', 'check'])
        # initialize needed objects
        variable_manager = VariableManager()
        loader = DataLoader()
        module_path = module_loader.find_plugin(self.options.module_name)
        if debug: 
            print "module path:", module_path
            print self.options
        options = Options(
                connection = self.options.connection,
                module_path = module_path,
                forks = self.options.forks,
                remote_user = self.options.remote_user,
                private_key_file = self.options.private_key_file,
                ssh_common_args = None,
                ssh_extra_args = None,
                sftp_extra_args = None,
                scp_extra_args = None,
                become = self.options.become,
                become_method = self.options.become_method,
                become_user = self.options.become_user,
                verbosity = None,
                check = self.options.check)
        passwords = dict(vault_pass='secret')

        ## create inventory and pass to var manager
        #inventory = Inventory(loader=loader, variable_manager=variable_manager, host_list='/etc/defaults/hosts')
        inventory = Inventory(loader=loader, variable_manager=variable_manager)
        if debug:
            print "Hosts read:"
            print inventory.get_hosts()
        variable_manager.set_inventory(inventory)

        ## create play with tasks
        play_source =  dict(
                name = "shell like",
                hosts = self.options.cwd,
                gather_facts = 'no',
                ignore_errors = True,
                #tasks = [ dict(action=dict(module='debug', args=dict(msg='Hello Galaxy!'))) ]
                #tasks = [ dict(action=dict(module=module, args=module_args)) ]   # OK
                tasks = [ 
                    dict(action=dict(module=module, args=module_args), async=30, poll=5, register="return"), 
                    dict(action="debug var=return.stdout_lines"),
                    dict(action="debug var=return.stderr"),
                    ]  
                )
        if debug:
            print "Play_source:"
            pprint( play_source )
        play = Play().load(play_source, variable_manager=variable_manager, loader=loader)
        tqm = None
        try:
            tqm = TaskQueueManager(
                    inventory=inventory,
                    variable_manager=variable_manager,
                    loader=loader,
                    options=options,
                    passwords=passwords,
                    stdout_callback='default',
                    )
            result = tqm.run(play)
            print "exit status:", result
        except Exception as e:
            print unicode(e)
            return False
        finally:
            pass
            if tqm is not None:
                tqm.cleanup()


    def emptyline(self):
        return

    def do_shell(self, arg):
        """
        You can run shell commands through the shell module.

        eg.:
        shell ps uax | grep java | wc -l
        shell killall python
        shell halt -n

        You can use the ! to force the shell module. eg.:
        !ps aux | grep java | wc -l
        """
        self.default(arg, True)

    def do_forks(self, arg):
        """Set the number of forks"""
        if not arg:
            print 'Usage: forks <number>'
            return
        self.options.forks = int(arg)
        self.set_prompt()

    do_serial = do_forks

    def do_cd(self, arg):
        """
            Change active host/group. You can use hosts patterns as well eg.:
            cd webservers
            cd webservers:dbservers
            cd webservers:!phoenix
            cd webservers:&staging
            cd webservers:dbservers:&staging:!phoenix
        """
        if not arg:
            self.options.cwd = '*'
        elif arg == '..':
            try:
                self.options.cwd = self.inventory.groups_for_host(self.options.cwd)[1].name
            except Exception:
                self.options.cwd = ''
        elif arg == '/':
            self.options.cwd = 'all'
        elif self.inventory.get_hosts(arg):
            self.options.cwd = arg
        else:
            print "no host matched"

        self.set_prompt()

    def do_list(self, arg):
        """List the hosts in the current group"""
        if arg == 'groups':
            items = self.inventory.list_groups()
        else:
            items = self.selected
        for item in items:
            print item

    def do_become(self, arg):
        """Toggle whether plays run with become"""
        self.options.become = not self.options.become
        print "become changed to %s" % self.options.become

    def do_remote_user(self, arg):
        """Given a username, set the remote user plays are run by"""
        if arg:
            self.options.remote_user = arg
            self.set_prompt()
        else:
            print "Please specify a remote user, e.g. `remote_user root`"

    def do_become_user(self, arg):
        """Given a username, set the user that plays are run by when using become"""
        if arg:
            self.options.become_user = arg
        else:
            print "Please specify a user, e.g. `become_user jenkins`"
            print "Current user is %s" % self.options.become_user

    def do_exit(self, args):
        """Exits from the console"""
        sys.stdout.write('\n')
        return -1

    do_EOF = do_exit

    def helpdefault(self, module_name):
        if module_name in self.modules:
            in_path = module_loader.find_plugin(module_name)
            oc, a, _ = ansible.utils.module_docs.get_docstring(in_path)
            print stringc(oc['short_description'], 'bright gray')
            print 'Parameters:'
            for opt in oc['options'].keys():
                print '  ' + stringc(opt, 'white') + ' ' + oc['options'][opt]['description'][0]

    def complete_cd(self, text, line, begidx, endidx):
        mline = line.partition(' ')[2]
        offs = len(mline) - len(text)

        if self.options.cwd == '*':
            completions = self.hosts + self.groups
        else:
            completions = self.inventory.list_hosts(self.options.cwd)

        return [s[offs:] for s in completions if s.startswith(mline)]

    def completedefault(self, text, line, begidx, endidx):
        if line.split()[0] in self.modules:
            mline = line.split(' ')[-1]
            offs = len(mline) - len(text)
            completions = self.module_args(line.split()[0])

            return [s[offs:] + '=' for s in completions if s.startswith(mline)]

    def module_args(self, module_name):
        in_path = module_loader.find_plugin(module_name)
        oc, a, _ = ansible.utils.module_docs.get_docstring(in_path)
        return oc['options'].keys()


if __name__ == '__main__':
    # This hack is to work around readline issues on a mac:
    #  http://stackoverflow.com/a/7116997/541202
    if 'libedit' in readline.__doc__:
        readline.parse_and_bind("bind ^I rl_complete")
    else:
        readline.parse_and_bind("tab: complete")
    histfile = os.path.join(os.path.expanduser("~"), ".ansible-shell_history")
    try:
        readline.read_history_file(histfile)
    except IOError:
        pass
    atexit.register(readline.write_history_file, histfile)

    (options, args) = AnsibleShell.parse_opts()
    AnsibleShell(options, args).cmdloop()

